#!/bin/bash -e

# pyinit
#
# This script will initialize a new git project in the current folder
# create a virtalenv and configure autoenv.
#
# Please install git, virtualenv, and autoenv, activate autoenv before using this script!
# see https://pypi.python.org/pypi/autoenv for instruction on how to install and activate autoenv
#
# Check my github: https://github.com/provonet/pyinit for documentation and new releases
# Johan Bakker

# Set CLICOLOR if you want Ansi Colors in iTerm2
export CLICOLOR=1

function help {
  cat << EOF

USAGE: pyinit [OPTION]... [python][python2][python3][pypy][pypy3]
  -a        skip autoenv init
  -d        enable debugging
  -h        show this help text and exit
  -g        skip git init
  -r        remove virtualenv
  -u        upgrade virtualenv
  -v        show version and exit
EOF
  exit 0
}

function install_requirements {
  if ls requirements*.txt > /dev/null 2>&1; then
    source "${VENV}/${_projectdir}/bin/activate"
    pip install --upgrade setuptools
    for _requirement_file in requirements*.txt; do
      # respect ordering in requirement file
      for _requirement in $(cat "${_requirement_file}"|grep -v '^#'); do
        echo "installing: ${_requirement}"
        pip install ${_requirement}
      done
    done
  fi
}

function python_virtualenv {
  local _python=$1
  local _projectdir=$2
  local _requirement=''

  if [[ ! -d ${VENV} ]]; then
    mkdir ${VENV}
  fi

  # Create virtualenv and install requirements
  if [[ ! -d "${VENV}/${_projectdir}" ]]; then
    printf '\e[92mcreating virtualenv\e[39m\n'
    virtualenv -p ${_python} "${VENV}/${_projectdir}"
    install_requirements
    virtualenv -p ${_python} --relocatable "${VENV}/${_projectdir}"
  fi
}

function _remove_virtualenv_dir {
  local _projectdir=$1

  if [[ -d "${VENV}/${_projectdir}" ]]; then
    rm -rf "${VENV}/${_projectdir}"
    rm -d ${VENV}
  fi
}

function _remove_autoenv_dir {
  local _projectdir=$1
  local _envfile=${AUTOENV_ENV_FILENAME:-.env}
  local _authfile=${AUTOENV_AUTH_FILE:-~/.autoenv_authorized}
  if [[ -L .env ]]; then
    set +e
    hash=($(shasum "$(pwd -P)/${_envfile}"))
    rm -f "${_envfile}"
    if grep -q ${hash[0]} "${_authfile}"; then
      cp "${_authfile}" "${_authfile}.old"
      grep -v ${hash[0]} "${_authfile}.old" > "${_authfile}"
    fi
    set -e
  fi
}

function remove_virtualenv {
  local _projectdir=$1
   printf '\e[92mremoving virtualenv\e[39m\n'
  _remove_autoenv_dir $_projectdir
  _remove_virtualenv_dir $_projectdir
}

function update_virtualenv {
  local _projectdir=$1
  local _python_version=$(env python -V 2>&1)
  printf '\e[92mupdating virtualenv\e[39m\n'
  source "${VENV}/${_projectdir}/bin/activate"
  install_requirements

  if [[ $_python_version =~ ' 2.' ]]; then
    virtualenv -p python2 --relocatable "${VENV}/${_projectdir}"
  elif [[ $_python_version =~ ' 3.' ]]; then
    virtualenv -p python3 --relocatable "${VENV}/${_projectdir}"
  else
    virtualenv --relocatable "${VENV}/${_projectdir}"
  fi
}

function python_autoenv {
  local _projectdir=$1
  local _envfile="${AUTOENV_ENV_FILENAME:-.env}"
  local _authfile=${AUTOENV_AUTH_FILE:-~/.autoenv_authorized}

  # Add autoenv symlink
  if [[ ! -L ${_envfile} ]]; then
    printf '\e[92menable autoenv\e[39m\n'
    touch ${_authfile}
    ln -s "${VENV}/${_projectdir}/bin/activate" "${_envfile}"
    hash=($(shasum "$(pwd -P)/${_envfile}"))
    if ! grep -q ${hash[0]} "${_authfile}"; then
      echo "${hash[1]}:${hash[0]}" >> "${_authfile}"
    fi
  fi
}

function gitinit {
  local _envfile="${AUTOENV_ENV_FILENAME:-.env}"

  if [[ ! -f .gitignore ]]; then
    touch .gitignore
  fi

  # Add .env directory to .gitignore
  if ! grep -q "^${_envfile}$" .gitignore; then
    echo "${_envfile}" >> .gitignore
  fi

  # Add virtualenv directory to .gitignore
  if ! grep -q "^${VENV}" .gitignore; then
    echo "${VENV}" >> .gitignore
  fi

  # Add .idea (pycharm) directory to .gitignore
  if ! grep -q '^\.idea$' .gitignore; then
    echo '.idea' >> .gitignore
  fi

  # Add *.pyc files to .gitignore
  if ! grep -q '^\*\.pyc' .gitignore; then
    echo '*.pyc' >> .gitignore
  fi

  if [[ ! -d .git ]]; then
    printf '\e[92minitializing git project\e[39m\n'
    git init
    git add .gitignore
    git commit -m 'initial commit' .gitignore
  fi
}


# Main
PYTHON=${@: -1}
PROJECT=$(basename "$PWD")
_migrate=false
_remove=false
_update=false
_skipgit=false
_skipautoenv=false

while getopts ":hvgardu" OPTION; do
    case $OPTION in
        h)  help
            exit 1;;
        v)  echo 'pyinit 0.3.1'
            exit 0;;
        g)  _skipgit=true;;
        a)  _skipautoenv=true;;
        r)  _remove=true;;
        d)  set -x;;
        u)  _update=true;;
        \?) exit 1;;
    esac
done

if [[ -d .virtualenv ]]; then
    printf '\e[33mLegacy virtualenv folder detected\e[39m\n'
    VENV='.virtualenv'
else
    VENV='.venv'
fi

printf '\e[96mpyinit:\e[39m\n'
if [[ "${_remove}" == "true" ]]; then
  remove_virtualenv "${PROJECT}"
  exit 0
fi

if [[ "${_update}" == "true" ]]; then
  update_virtualenv "${PROJECT}"
  exit 0
fi

if [[ ! ${PYTHON} =~ ^python[23]$ ]]; then

  if [[ -f requirements.txt ]]; then
    if grep -qE '^#\s*pyinit:\s*python2' requirements.txt; then
      PYTHON=$(basename $(which -a python2 || which python))
    elif grep -qE '^#\s*pyinit:\s*python3' requirements.txt; then
      PYTHON=$(basename $(which -a python3 || which python))
    elif grep -qE '^#\s*pyinit:\s*pypy3' requirements.txt; then
      PYTHON=pypy3
    elif grep -qE '^#\s*pyinit:\s*pypy' requirements.txt; then
      PYTHON=pypy
    elif grep -qE '^#\s*pyinit:\s*python' requirements.txt; then
      PYTHON=python
    fi
  fi

  if [[ ! ${PYTHON} =~ ^(python|pypy) ]]; then
    printf "\e[91mno python version specified! use command line parameter or set python version in requirements.txt\e[39m\n"
    exit 1
  elif [[ ! ${PYTHON} =~ ^(python|pypi)[23]?$ ]]; then
    printf "\e[91minvalid python version! use python, python2 or python3\e[39m\n"
    exit 1
  fi
fi

# find path
PYTHON=$(ls -1 $(which ${PYTHON})|sort -nr| head -n1)

if ! which virtualenv >/dev/null; then
  printf '\e[91mplease install "virtualenv" before using this script!\e[39m\n'
  help
  exit 1
fi

python_virtualenv "${PYTHON}" "${PROJECT}"

if [[ "${_skipautoenv}" == "false" ]]; then
  if ! which shasum >/dev/null; then
    printf '\e[91mplease install "shasum" before using this script!\e[39m\n'
    help
    exit 1
  fi

  python_autoenv "${PROJECT}"
else
  printf '\e[32mskipping autoenv initialization\e[39m\n'
fi

if [[ "${_skipgit}" == "false" ]]; then
  gitinit
else
  printf '\e[32mskipping git initialization\e[39m\n'
fi

if [[ ${_skipautoenv} == "false" ]]; then
  printf '\e[93muse "cd ." to enable the new virtualenv\e[39m\n'
else
  printf "\e[93muse \"source '${VENV}/${PROJECT}/bin/activate'\" to enable the new virtualenv\e[39m\n"
fi

